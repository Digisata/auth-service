syntax = "proto3";

package proto;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "payload_messages.proto";
import "google/protobuf/empty.proto";

option go_package = "./stubs";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  security_definitions: {
      security: {
              key: "Bearer"
              value: {
                  type: TYPE_API_KEY
                  in: IN_HEADER
                  name: "Authorization"
                  description: "Authentication token, prefixed by Bearer: Bearer <token>"
              }
      }
  }
  security: {
      security_requirement: {
          key: "Bearer"
      }
  }
  info: {
    title: "Auth Service",
    version: "v1.0.0"
  }
  consumes: "application/json"
  produces: "application/json"
};

service AuthService {
  // Auth
  rpc Verify (google.protobuf.Empty) returns (BaseResponse) {
    option (google.api.http) = {
      get: "/api/v1/verify",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: ["Auth"]
        summary: "Verify request"
        description: "This API for verify request"
    };
  }

  rpc LoginAdmin (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/admin/login",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        security: {}
        tags: ["Auth"]
        summary: "Admin login"
        description: "This API for admin login"
    };
  }

  rpc LoginCustomer (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/customer/login",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        security: {}
        tags: ["Auth"]
        summary: "Customer login"
        description: "This API for customer login"
    };
  }

  rpc LoginCommittee (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/committee/login",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        security: {}
        tags: ["Auth"]
        summary: "Committee login"
        description: "This API for committee login"
    };
  }

  rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/api/v1/refresh",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        security: {}
        tags: ["Auth"]
        summary: "Refresh token"
        description: "This API for refresh token"
    };
  }

  rpc Logout (LogoutRequest) returns (BaseResponse) {
    option (google.api.http) = {
      post: "/api/v1/logout",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: ["Auth"]
        summary: "User logout"
        description: "This API for user logout"
    };
  }

  // User
  rpc CreateUser (CreateUserRequest) returns (BaseResponse) {
    option (google.api.http) = {
      post: "/api/v1/users",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: ["User"]
        summary: "Create user"
        description: "This API for create user"
    };
  }

  rpc GetAllUser (GetAllUserRequest) returns (GetAllUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/users",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: ["User"]
        summary: "Get all user"
        description: "This API for get all user"
    };
  }

  rpc GetUserByID (GetUserByIDRequest) returns (GetUserByIDResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: ["User"]
        summary: "Get user by id"
        description: "This API for get user by id"
    };
  }

  rpc UpdateUser (UpdateUserRequest) returns (BaseResponse) {
    option (google.api.http) = {
      put: "/api/v1/users/{id}",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: ["User"]
        summary: "Update user by id"
        description: "This API for update user by id"
    };
  }

  rpc DeleteUser (DeleteUserRequest) returns (BaseResponse) {
    option (google.api.http) = {
      delete: "/api/v1/users/{id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: ["User"]
        summary: "Delete user by id"
        description: "This API for delete user by id"
    };
  }

  // Profile
  rpc GetProfileByID (google.protobuf.Empty) returns (GetProfileByIDResponse) {
    option (google.api.http) = {
      get: "/api/v1/profile",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: ["Profile"]
        summary: "Get profile"
        description: "This API for get profile"
    };
  }

  rpc ChangePassword (ChangePasswordRequest) returns (BaseResponse) {
    option (google.api.http) = {
      put: "/api/v1/profile",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
        tags: ["Profile"]
        summary: "Change password"
        description: "This API for change password"
    };
  }
}